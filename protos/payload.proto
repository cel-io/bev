
syntax = "proto3";


message BevPayload{
    enum Action {
        CREATE_AGENT = 0;
        CREATE_RECORD = 1;
        UPDATE_RECORD = 2;
        TRANSFER_RECORD = 3;
        CREATE_ELECTION = 4;
        CREATE_VOTING_OPTION = 5;
        CREATE_POLL_REGISTRATION = 6;
        CREATE_VOTER = 7;
        CREATE_VOTE = 8;
        UPDATE_VOTE = 9;
        UPDATE_ELECTION = 10;
    }

    // Whether the payload contains a create agent, create record,
    // update record, or transfer record action
    Action action = 1;

    // The transaction handler will read from just one of these fields
    // according to the action
    CreateAgentAction create_agent = 2;
    CreateRecordAction create_record = 3;
    UpdateRecordAction update_record = 4;
    TransferRecordAction transfer_record = 5;
    CreateElectionAction create_election = 6;
    CreateVotingOptionAction create_voting_option = 7;
    CreatePollRegistrationAction create_poll_registration = 8;
    CreateVoterAction create_voter = 9;
    CreateVoteAction create_vote = 10;
    UpdateVoteAction update_vote = 11;
    UpdateElectionAction update_election = 12;

    // Approximately when transaction was submitted, as a Unix UTC timestamp
    uint64 timestamp = 13;
}


message CreateAgentAction {
    // A human-readable name identifying the new agent
    string name = 1;
}


message CreateRecordAction {
    // The user-defined natural key which identifies the object in the
    // real world (for example a serial number)
    string record_id = 1;

    // Coordinates are expected to be in millionths of a degree
    sint64 latitude = 2;
    sint64 longitude = 3;
}


message UpdateRecordAction {
    // The id of the record being updated
    string record_id = 1;

    // Coordinates are expected to be in millionths of a degree
    sint64 latitude = 2;
    sint64 longitude = 3;
}


message TransferRecordAction {
    // The id of the record for the ownership transfer
    string record_id = 1;

    // The public key of the agent to which the record will be transferred
    string receiving_agent = 2;
}

message CreateElectionAction {
    string election_id = 1;
    string name = 2;
    string description = 3;
    uint64 start_timestamp = 4;
    uint64 end_timestamp = 5;

    enum ResultsPermission {
        PRIVATE = 0;
        VOTERS_ONLY = 1;
        PUBLIC = 2;
    }

    ResultsPermission results_permission = 6;
    bool can_change_vote = 7;
    bool can_show_realtime = 8;

    string admin_id = 9;
    bool status = 10;
}

message CreateVotingOptionAction{
    string voting_option_id = 1;
    string name = 2;
    string description = 3;

    string election_id = 4;
}

message CreatePollRegistrationAction{
    string voter_id = 1;
    string name = 2;

    string election_id = 3;
}

message CreateVoterAction{
    string voter_id = 1;
    string public_key = 2;
    string name = 3;
    uint64 created_at = 4;


    enum Type {
        VOTER = 0;
        ADMIN = 1;
        SUPERADMIN = 2;
    }

    Type type = 5;
}

message CreateVoteAction{
    string vote_id = 1;
    uint64 timestamp = 2;
    string voter_id = 3;

    string election_id = 4;
    string voting_option_id = 5;
}

message UpdateVoteAction{
    string vote_id = 1;
    uint64 timestamp = 2;
    string voting_option_id = 3;
}

message UpdateElectionAction {
    string election_id = 1;
    string name = 2;
    string description = 3;
    uint64 start_timestamp = 4;
    uint64 end_timestamp = 5;

    enum ResultsPermission {
        PRIVATE = 0;
        VOTERS_ONLY = 1;
        PUBLIC = 2;
    }

    ResultsPermission results_permission = 6;
    bool can_change_vote = 7;
    bool can_show_realtime = 8;

    string admin_id = 9;
    bool status = 10;
}